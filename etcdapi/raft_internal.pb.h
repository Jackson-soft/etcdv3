// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: raft_internal.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_raft_5finternal_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_raft_5finternal_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "gogo.pb.h"
#include "etcdserver.pb.h"
#include "rpc.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_raft_5finternal_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_raft_5finternal_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_raft_5finternal_2eproto;
namespace etcdserverpb {
class EmptyResponse;
class EmptyResponseDefaultTypeInternal;
extern EmptyResponseDefaultTypeInternal _EmptyResponse_default_instance_;
class InternalAuthenticateRequest;
class InternalAuthenticateRequestDefaultTypeInternal;
extern InternalAuthenticateRequestDefaultTypeInternal _InternalAuthenticateRequest_default_instance_;
class InternalRaftRequest;
class InternalRaftRequestDefaultTypeInternal;
extern InternalRaftRequestDefaultTypeInternal _InternalRaftRequest_default_instance_;
class RequestHeader;
class RequestHeaderDefaultTypeInternal;
extern RequestHeaderDefaultTypeInternal _RequestHeader_default_instance_;
}  // namespace etcdserverpb
PROTOBUF_NAMESPACE_OPEN
template<> ::etcdserverpb::EmptyResponse* Arena::CreateMaybeMessage<::etcdserverpb::EmptyResponse>(Arena*);
template<> ::etcdserverpb::InternalAuthenticateRequest* Arena::CreateMaybeMessage<::etcdserverpb::InternalAuthenticateRequest>(Arena*);
template<> ::etcdserverpb::InternalRaftRequest* Arena::CreateMaybeMessage<::etcdserverpb::InternalRaftRequest>(Arena*);
template<> ::etcdserverpb::RequestHeader* Arena::CreateMaybeMessage<::etcdserverpb::RequestHeader>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace etcdserverpb {

// ===================================================================

class RequestHeader :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:etcdserverpb.RequestHeader) */ {
 public:
  RequestHeader();
  virtual ~RequestHeader();

  RequestHeader(const RequestHeader& from);
  RequestHeader(RequestHeader&& from) noexcept
    : RequestHeader() {
    *this = ::std::move(from);
  }

  inline RequestHeader& operator=(const RequestHeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestHeader& operator=(RequestHeader&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RequestHeader& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RequestHeader* internal_default_instance() {
    return reinterpret_cast<const RequestHeader*>(
               &_RequestHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RequestHeader& a, RequestHeader& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestHeader* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RequestHeader* New() const final {
    return CreateMaybeMessage<RequestHeader>(nullptr);
  }

  RequestHeader* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RequestHeader>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RequestHeader& from);
  void MergeFrom(const RequestHeader& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestHeader* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "etcdserverpb.RequestHeader";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_raft_5finternal_2eproto);
    return ::descriptor_table_raft_5finternal_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsernameFieldNumber = 2,
    kIDFieldNumber = 1,
    kAuthRevisionFieldNumber = 3,
  };
  // string username = 2;
  void clear_username();
  const std::string& username() const;
  void set_username(const std::string& value);
  void set_username(std::string&& value);
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  std::string* mutable_username();
  std::string* release_username();
  void set_allocated_username(std::string* username);

  // uint64 ID = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // uint64 auth_revision = 3;
  void clear_auth_revision();
  ::PROTOBUF_NAMESPACE_ID::uint64 auth_revision() const;
  void set_auth_revision(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:etcdserverpb.RequestHeader)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::PROTOBUF_NAMESPACE_ID::uint64 id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 auth_revision_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_raft_5finternal_2eproto;
};
// -------------------------------------------------------------------

class InternalRaftRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:etcdserverpb.InternalRaftRequest) */ {
 public:
  InternalRaftRequest();
  virtual ~InternalRaftRequest();

  InternalRaftRequest(const InternalRaftRequest& from);
  InternalRaftRequest(InternalRaftRequest&& from) noexcept
    : InternalRaftRequest() {
    *this = ::std::move(from);
  }

  inline InternalRaftRequest& operator=(const InternalRaftRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline InternalRaftRequest& operator=(InternalRaftRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InternalRaftRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InternalRaftRequest* internal_default_instance() {
    return reinterpret_cast<const InternalRaftRequest*>(
               &_InternalRaftRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(InternalRaftRequest& a, InternalRaftRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(InternalRaftRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InternalRaftRequest* New() const final {
    return CreateMaybeMessage<InternalRaftRequest>(nullptr);
  }

  InternalRaftRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InternalRaftRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InternalRaftRequest& from);
  void MergeFrom(const InternalRaftRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InternalRaftRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "etcdserverpb.InternalRaftRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_raft_5finternal_2eproto);
    return ::descriptor_table_raft_5finternal_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kV2FieldNumber = 2,
    kRangeFieldNumber = 3,
    kPutFieldNumber = 4,
    kDeleteRangeFieldNumber = 5,
    kTxnFieldNumber = 6,
    kCompactionFieldNumber = 7,
    kLeaseGrantFieldNumber = 8,
    kLeaseRevokeFieldNumber = 9,
    kAlarmFieldNumber = 10,
    kHeaderFieldNumber = 100,
    kAuthEnableFieldNumber = 1000,
    kAuthDisableFieldNumber = 1011,
    kAuthenticateFieldNumber = 1012,
    kAuthUserAddFieldNumber = 1100,
    kAuthUserDeleteFieldNumber = 1101,
    kAuthUserGetFieldNumber = 1102,
    kAuthUserChangePasswordFieldNumber = 1103,
    kAuthUserGrantRoleFieldNumber = 1104,
    kAuthUserRevokeRoleFieldNumber = 1105,
    kAuthUserListFieldNumber = 1106,
    kAuthRoleListFieldNumber = 1107,
    kAuthRoleAddFieldNumber = 1200,
    kAuthRoleDeleteFieldNumber = 1201,
    kAuthRoleGetFieldNumber = 1202,
    kAuthRoleGrantPermissionFieldNumber = 1203,
    kAuthRoleRevokePermissionFieldNumber = 1204,
    kIDFieldNumber = 1,
  };
  // .etcdserverpb.Request v2 = 2;
  bool has_v2() const;
  void clear_v2();
  const ::etcdserverpb::Request& v2() const;
  ::etcdserverpb::Request* release_v2();
  ::etcdserverpb::Request* mutable_v2();
  void set_allocated_v2(::etcdserverpb::Request* v2);

  // .etcdserverpb.RangeRequest range = 3;
  bool has_range() const;
  void clear_range();
  const ::etcdserverpb::RangeRequest& range() const;
  ::etcdserverpb::RangeRequest* release_range();
  ::etcdserverpb::RangeRequest* mutable_range();
  void set_allocated_range(::etcdserverpb::RangeRequest* range);

  // .etcdserverpb.PutRequest put = 4;
  bool has_put() const;
  void clear_put();
  const ::etcdserverpb::PutRequest& put() const;
  ::etcdserverpb::PutRequest* release_put();
  ::etcdserverpb::PutRequest* mutable_put();
  void set_allocated_put(::etcdserverpb::PutRequest* put);

  // .etcdserverpb.DeleteRangeRequest delete_range = 5;
  bool has_delete_range() const;
  void clear_delete_range();
  const ::etcdserverpb::DeleteRangeRequest& delete_range() const;
  ::etcdserverpb::DeleteRangeRequest* release_delete_range();
  ::etcdserverpb::DeleteRangeRequest* mutable_delete_range();
  void set_allocated_delete_range(::etcdserverpb::DeleteRangeRequest* delete_range);

  // .etcdserverpb.TxnRequest txn = 6;
  bool has_txn() const;
  void clear_txn();
  const ::etcdserverpb::TxnRequest& txn() const;
  ::etcdserverpb::TxnRequest* release_txn();
  ::etcdserverpb::TxnRequest* mutable_txn();
  void set_allocated_txn(::etcdserverpb::TxnRequest* txn);

  // .etcdserverpb.CompactionRequest compaction = 7;
  bool has_compaction() const;
  void clear_compaction();
  const ::etcdserverpb::CompactionRequest& compaction() const;
  ::etcdserverpb::CompactionRequest* release_compaction();
  ::etcdserverpb::CompactionRequest* mutable_compaction();
  void set_allocated_compaction(::etcdserverpb::CompactionRequest* compaction);

  // .etcdserverpb.LeaseGrantRequest lease_grant = 8;
  bool has_lease_grant() const;
  void clear_lease_grant();
  const ::etcdserverpb::LeaseGrantRequest& lease_grant() const;
  ::etcdserverpb::LeaseGrantRequest* release_lease_grant();
  ::etcdserverpb::LeaseGrantRequest* mutable_lease_grant();
  void set_allocated_lease_grant(::etcdserverpb::LeaseGrantRequest* lease_grant);

  // .etcdserverpb.LeaseRevokeRequest lease_revoke = 9;
  bool has_lease_revoke() const;
  void clear_lease_revoke();
  const ::etcdserverpb::LeaseRevokeRequest& lease_revoke() const;
  ::etcdserverpb::LeaseRevokeRequest* release_lease_revoke();
  ::etcdserverpb::LeaseRevokeRequest* mutable_lease_revoke();
  void set_allocated_lease_revoke(::etcdserverpb::LeaseRevokeRequest* lease_revoke);

  // .etcdserverpb.AlarmRequest alarm = 10;
  bool has_alarm() const;
  void clear_alarm();
  const ::etcdserverpb::AlarmRequest& alarm() const;
  ::etcdserverpb::AlarmRequest* release_alarm();
  ::etcdserverpb::AlarmRequest* mutable_alarm();
  void set_allocated_alarm(::etcdserverpb::AlarmRequest* alarm);

  // .etcdserverpb.RequestHeader header = 100;
  bool has_header() const;
  void clear_header();
  const ::etcdserverpb::RequestHeader& header() const;
  ::etcdserverpb::RequestHeader* release_header();
  ::etcdserverpb::RequestHeader* mutable_header();
  void set_allocated_header(::etcdserverpb::RequestHeader* header);

  // .etcdserverpb.AuthEnableRequest auth_enable = 1000;
  bool has_auth_enable() const;
  void clear_auth_enable();
  const ::etcdserverpb::AuthEnableRequest& auth_enable() const;
  ::etcdserverpb::AuthEnableRequest* release_auth_enable();
  ::etcdserverpb::AuthEnableRequest* mutable_auth_enable();
  void set_allocated_auth_enable(::etcdserverpb::AuthEnableRequest* auth_enable);

  // .etcdserverpb.AuthDisableRequest auth_disable = 1011;
  bool has_auth_disable() const;
  void clear_auth_disable();
  const ::etcdserverpb::AuthDisableRequest& auth_disable() const;
  ::etcdserverpb::AuthDisableRequest* release_auth_disable();
  ::etcdserverpb::AuthDisableRequest* mutable_auth_disable();
  void set_allocated_auth_disable(::etcdserverpb::AuthDisableRequest* auth_disable);

  // .etcdserverpb.InternalAuthenticateRequest authenticate = 1012;
  bool has_authenticate() const;
  void clear_authenticate();
  const ::etcdserverpb::InternalAuthenticateRequest& authenticate() const;
  ::etcdserverpb::InternalAuthenticateRequest* release_authenticate();
  ::etcdserverpb::InternalAuthenticateRequest* mutable_authenticate();
  void set_allocated_authenticate(::etcdserverpb::InternalAuthenticateRequest* authenticate);

  // .etcdserverpb.AuthUserAddRequest auth_user_add = 1100;
  bool has_auth_user_add() const;
  void clear_auth_user_add();
  const ::etcdserverpb::AuthUserAddRequest& auth_user_add() const;
  ::etcdserverpb::AuthUserAddRequest* release_auth_user_add();
  ::etcdserverpb::AuthUserAddRequest* mutable_auth_user_add();
  void set_allocated_auth_user_add(::etcdserverpb::AuthUserAddRequest* auth_user_add);

  // .etcdserverpb.AuthUserDeleteRequest auth_user_delete = 1101;
  bool has_auth_user_delete() const;
  void clear_auth_user_delete();
  const ::etcdserverpb::AuthUserDeleteRequest& auth_user_delete() const;
  ::etcdserverpb::AuthUserDeleteRequest* release_auth_user_delete();
  ::etcdserverpb::AuthUserDeleteRequest* mutable_auth_user_delete();
  void set_allocated_auth_user_delete(::etcdserverpb::AuthUserDeleteRequest* auth_user_delete);

  // .etcdserverpb.AuthUserGetRequest auth_user_get = 1102;
  bool has_auth_user_get() const;
  void clear_auth_user_get();
  const ::etcdserverpb::AuthUserGetRequest& auth_user_get() const;
  ::etcdserverpb::AuthUserGetRequest* release_auth_user_get();
  ::etcdserverpb::AuthUserGetRequest* mutable_auth_user_get();
  void set_allocated_auth_user_get(::etcdserverpb::AuthUserGetRequest* auth_user_get);

  // .etcdserverpb.AuthUserChangePasswordRequest auth_user_change_password = 1103;
  bool has_auth_user_change_password() const;
  void clear_auth_user_change_password();
  const ::etcdserverpb::AuthUserChangePasswordRequest& auth_user_change_password() const;
  ::etcdserverpb::AuthUserChangePasswordRequest* release_auth_user_change_password();
  ::etcdserverpb::AuthUserChangePasswordRequest* mutable_auth_user_change_password();
  void set_allocated_auth_user_change_password(::etcdserverpb::AuthUserChangePasswordRequest* auth_user_change_password);

  // .etcdserverpb.AuthUserGrantRoleRequest auth_user_grant_role = 1104;
  bool has_auth_user_grant_role() const;
  void clear_auth_user_grant_role();
  const ::etcdserverpb::AuthUserGrantRoleRequest& auth_user_grant_role() const;
  ::etcdserverpb::AuthUserGrantRoleRequest* release_auth_user_grant_role();
  ::etcdserverpb::AuthUserGrantRoleRequest* mutable_auth_user_grant_role();
  void set_allocated_auth_user_grant_role(::etcdserverpb::AuthUserGrantRoleRequest* auth_user_grant_role);

  // .etcdserverpb.AuthUserRevokeRoleRequest auth_user_revoke_role = 1105;
  bool has_auth_user_revoke_role() const;
  void clear_auth_user_revoke_role();
  const ::etcdserverpb::AuthUserRevokeRoleRequest& auth_user_revoke_role() const;
  ::etcdserverpb::AuthUserRevokeRoleRequest* release_auth_user_revoke_role();
  ::etcdserverpb::AuthUserRevokeRoleRequest* mutable_auth_user_revoke_role();
  void set_allocated_auth_user_revoke_role(::etcdserverpb::AuthUserRevokeRoleRequest* auth_user_revoke_role);

  // .etcdserverpb.AuthUserListRequest auth_user_list = 1106;
  bool has_auth_user_list() const;
  void clear_auth_user_list();
  const ::etcdserverpb::AuthUserListRequest& auth_user_list() const;
  ::etcdserverpb::AuthUserListRequest* release_auth_user_list();
  ::etcdserverpb::AuthUserListRequest* mutable_auth_user_list();
  void set_allocated_auth_user_list(::etcdserverpb::AuthUserListRequest* auth_user_list);

  // .etcdserverpb.AuthRoleListRequest auth_role_list = 1107;
  bool has_auth_role_list() const;
  void clear_auth_role_list();
  const ::etcdserverpb::AuthRoleListRequest& auth_role_list() const;
  ::etcdserverpb::AuthRoleListRequest* release_auth_role_list();
  ::etcdserverpb::AuthRoleListRequest* mutable_auth_role_list();
  void set_allocated_auth_role_list(::etcdserverpb::AuthRoleListRequest* auth_role_list);

  // .etcdserverpb.AuthRoleAddRequest auth_role_add = 1200;
  bool has_auth_role_add() const;
  void clear_auth_role_add();
  const ::etcdserverpb::AuthRoleAddRequest& auth_role_add() const;
  ::etcdserverpb::AuthRoleAddRequest* release_auth_role_add();
  ::etcdserverpb::AuthRoleAddRequest* mutable_auth_role_add();
  void set_allocated_auth_role_add(::etcdserverpb::AuthRoleAddRequest* auth_role_add);

  // .etcdserverpb.AuthRoleDeleteRequest auth_role_delete = 1201;
  bool has_auth_role_delete() const;
  void clear_auth_role_delete();
  const ::etcdserverpb::AuthRoleDeleteRequest& auth_role_delete() const;
  ::etcdserverpb::AuthRoleDeleteRequest* release_auth_role_delete();
  ::etcdserverpb::AuthRoleDeleteRequest* mutable_auth_role_delete();
  void set_allocated_auth_role_delete(::etcdserverpb::AuthRoleDeleteRequest* auth_role_delete);

  // .etcdserverpb.AuthRoleGetRequest auth_role_get = 1202;
  bool has_auth_role_get() const;
  void clear_auth_role_get();
  const ::etcdserverpb::AuthRoleGetRequest& auth_role_get() const;
  ::etcdserverpb::AuthRoleGetRequest* release_auth_role_get();
  ::etcdserverpb::AuthRoleGetRequest* mutable_auth_role_get();
  void set_allocated_auth_role_get(::etcdserverpb::AuthRoleGetRequest* auth_role_get);

  // .etcdserverpb.AuthRoleGrantPermissionRequest auth_role_grant_permission = 1203;
  bool has_auth_role_grant_permission() const;
  void clear_auth_role_grant_permission();
  const ::etcdserverpb::AuthRoleGrantPermissionRequest& auth_role_grant_permission() const;
  ::etcdserverpb::AuthRoleGrantPermissionRequest* release_auth_role_grant_permission();
  ::etcdserverpb::AuthRoleGrantPermissionRequest* mutable_auth_role_grant_permission();
  void set_allocated_auth_role_grant_permission(::etcdserverpb::AuthRoleGrantPermissionRequest* auth_role_grant_permission);

  // .etcdserverpb.AuthRoleRevokePermissionRequest auth_role_revoke_permission = 1204;
  bool has_auth_role_revoke_permission() const;
  void clear_auth_role_revoke_permission();
  const ::etcdserverpb::AuthRoleRevokePermissionRequest& auth_role_revoke_permission() const;
  ::etcdserverpb::AuthRoleRevokePermissionRequest* release_auth_role_revoke_permission();
  ::etcdserverpb::AuthRoleRevokePermissionRequest* mutable_auth_role_revoke_permission();
  void set_allocated_auth_role_revoke_permission(::etcdserverpb::AuthRoleRevokePermissionRequest* auth_role_revoke_permission);

  // uint64 ID = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:etcdserverpb.InternalRaftRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::etcdserverpb::Request* v2_;
  ::etcdserverpb::RangeRequest* range_;
  ::etcdserverpb::PutRequest* put_;
  ::etcdserverpb::DeleteRangeRequest* delete_range_;
  ::etcdserverpb::TxnRequest* txn_;
  ::etcdserverpb::CompactionRequest* compaction_;
  ::etcdserverpb::LeaseGrantRequest* lease_grant_;
  ::etcdserverpb::LeaseRevokeRequest* lease_revoke_;
  ::etcdserverpb::AlarmRequest* alarm_;
  ::etcdserverpb::RequestHeader* header_;
  ::etcdserverpb::AuthEnableRequest* auth_enable_;
  ::etcdserverpb::AuthDisableRequest* auth_disable_;
  ::etcdserverpb::InternalAuthenticateRequest* authenticate_;
  ::etcdserverpb::AuthUserAddRequest* auth_user_add_;
  ::etcdserverpb::AuthUserDeleteRequest* auth_user_delete_;
  ::etcdserverpb::AuthUserGetRequest* auth_user_get_;
  ::etcdserverpb::AuthUserChangePasswordRequest* auth_user_change_password_;
  ::etcdserverpb::AuthUserGrantRoleRequest* auth_user_grant_role_;
  ::etcdserverpb::AuthUserRevokeRoleRequest* auth_user_revoke_role_;
  ::etcdserverpb::AuthUserListRequest* auth_user_list_;
  ::etcdserverpb::AuthRoleListRequest* auth_role_list_;
  ::etcdserverpb::AuthRoleAddRequest* auth_role_add_;
  ::etcdserverpb::AuthRoleDeleteRequest* auth_role_delete_;
  ::etcdserverpb::AuthRoleGetRequest* auth_role_get_;
  ::etcdserverpb::AuthRoleGrantPermissionRequest* auth_role_grant_permission_;
  ::etcdserverpb::AuthRoleRevokePermissionRequest* auth_role_revoke_permission_;
  ::PROTOBUF_NAMESPACE_ID::uint64 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_raft_5finternal_2eproto;
};
// -------------------------------------------------------------------

class EmptyResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:etcdserverpb.EmptyResponse) */ {
 public:
  EmptyResponse();
  virtual ~EmptyResponse();

  EmptyResponse(const EmptyResponse& from);
  EmptyResponse(EmptyResponse&& from) noexcept
    : EmptyResponse() {
    *this = ::std::move(from);
  }

  inline EmptyResponse& operator=(const EmptyResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline EmptyResponse& operator=(EmptyResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EmptyResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EmptyResponse* internal_default_instance() {
    return reinterpret_cast<const EmptyResponse*>(
               &_EmptyResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(EmptyResponse& a, EmptyResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(EmptyResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EmptyResponse* New() const final {
    return CreateMaybeMessage<EmptyResponse>(nullptr);
  }

  EmptyResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EmptyResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EmptyResponse& from);
  void MergeFrom(const EmptyResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EmptyResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "etcdserverpb.EmptyResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_raft_5finternal_2eproto);
    return ::descriptor_table_raft_5finternal_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:etcdserverpb.EmptyResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_raft_5finternal_2eproto;
};
// -------------------------------------------------------------------

class InternalAuthenticateRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:etcdserverpb.InternalAuthenticateRequest) */ {
 public:
  InternalAuthenticateRequest();
  virtual ~InternalAuthenticateRequest();

  InternalAuthenticateRequest(const InternalAuthenticateRequest& from);
  InternalAuthenticateRequest(InternalAuthenticateRequest&& from) noexcept
    : InternalAuthenticateRequest() {
    *this = ::std::move(from);
  }

  inline InternalAuthenticateRequest& operator=(const InternalAuthenticateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline InternalAuthenticateRequest& operator=(InternalAuthenticateRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InternalAuthenticateRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InternalAuthenticateRequest* internal_default_instance() {
    return reinterpret_cast<const InternalAuthenticateRequest*>(
               &_InternalAuthenticateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(InternalAuthenticateRequest& a, InternalAuthenticateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(InternalAuthenticateRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InternalAuthenticateRequest* New() const final {
    return CreateMaybeMessage<InternalAuthenticateRequest>(nullptr);
  }

  InternalAuthenticateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InternalAuthenticateRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InternalAuthenticateRequest& from);
  void MergeFrom(const InternalAuthenticateRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InternalAuthenticateRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "etcdserverpb.InternalAuthenticateRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_raft_5finternal_2eproto);
    return ::descriptor_table_raft_5finternal_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kPasswordFieldNumber = 2,
    kSimpleTokenFieldNumber = 3,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // string password = 2;
  void clear_password();
  const std::string& password() const;
  void set_password(const std::string& value);
  void set_password(std::string&& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  std::string* mutable_password();
  std::string* release_password();
  void set_allocated_password(std::string* password);

  // string simple_token = 3;
  void clear_simple_token();
  const std::string& simple_token() const;
  void set_simple_token(const std::string& value);
  void set_simple_token(std::string&& value);
  void set_simple_token(const char* value);
  void set_simple_token(const char* value, size_t size);
  std::string* mutable_simple_token();
  std::string* release_simple_token();
  void set_allocated_simple_token(std::string* simple_token);

  // @@protoc_insertion_point(class_scope:etcdserverpb.InternalAuthenticateRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr simple_token_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_raft_5finternal_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RequestHeader

// uint64 ID = 1;
inline void RequestHeader::clear_id() {
  id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RequestHeader::id() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.RequestHeader.ID)
  return id_;
}
inline void RequestHeader::set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:etcdserverpb.RequestHeader.ID)
}

// string username = 2;
inline void RequestHeader::clear_username() {
  username_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RequestHeader::username() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.RequestHeader.username)
  return username_.GetNoArena();
}
inline void RequestHeader::set_username(const std::string& value) {
  
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:etcdserverpb.RequestHeader.username)
}
inline void RequestHeader::set_username(std::string&& value) {
  
  username_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:etcdserverpb.RequestHeader.username)
}
inline void RequestHeader::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:etcdserverpb.RequestHeader.username)
}
inline void RequestHeader::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:etcdserverpb.RequestHeader.username)
}
inline std::string* RequestHeader::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:etcdserverpb.RequestHeader.username)
  return username_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RequestHeader::release_username() {
  // @@protoc_insertion_point(field_release:etcdserverpb.RequestHeader.username)
  
  return username_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RequestHeader::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.RequestHeader.username)
}

// uint64 auth_revision = 3;
inline void RequestHeader::clear_auth_revision() {
  auth_revision_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RequestHeader::auth_revision() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.RequestHeader.auth_revision)
  return auth_revision_;
}
inline void RequestHeader::set_auth_revision(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  auth_revision_ = value;
  // @@protoc_insertion_point(field_set:etcdserverpb.RequestHeader.auth_revision)
}

// -------------------------------------------------------------------

// InternalRaftRequest

// .etcdserverpb.RequestHeader header = 100;
inline bool InternalRaftRequest::has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline void InternalRaftRequest::clear_header() {
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
inline const ::etcdserverpb::RequestHeader& InternalRaftRequest::header() const {
  const ::etcdserverpb::RequestHeader* p = header_;
  // @@protoc_insertion_point(field_get:etcdserverpb.InternalRaftRequest.header)
  return p != nullptr ? *p : *reinterpret_cast<const ::etcdserverpb::RequestHeader*>(
      &::etcdserverpb::_RequestHeader_default_instance_);
}
inline ::etcdserverpb::RequestHeader* InternalRaftRequest::release_header() {
  // @@protoc_insertion_point(field_release:etcdserverpb.InternalRaftRequest.header)
  
  ::etcdserverpb::RequestHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::etcdserverpb::RequestHeader* InternalRaftRequest::mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::etcdserverpb::RequestHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:etcdserverpb.InternalRaftRequest.header)
  return header_;
}
inline void InternalRaftRequest::set_allocated_header(::etcdserverpb::RequestHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.InternalRaftRequest.header)
}

// uint64 ID = 1;
inline void InternalRaftRequest::clear_id() {
  id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 InternalRaftRequest::id() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.InternalRaftRequest.ID)
  return id_;
}
inline void InternalRaftRequest::set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:etcdserverpb.InternalRaftRequest.ID)
}

// .etcdserverpb.Request v2 = 2;
inline bool InternalRaftRequest::has_v2() const {
  return this != internal_default_instance() && v2_ != nullptr;
}
inline const ::etcdserverpb::Request& InternalRaftRequest::v2() const {
  const ::etcdserverpb::Request* p = v2_;
  // @@protoc_insertion_point(field_get:etcdserverpb.InternalRaftRequest.v2)
  return p != nullptr ? *p : *reinterpret_cast<const ::etcdserverpb::Request*>(
      &::etcdserverpb::_Request_default_instance_);
}
inline ::etcdserverpb::Request* InternalRaftRequest::release_v2() {
  // @@protoc_insertion_point(field_release:etcdserverpb.InternalRaftRequest.v2)
  
  ::etcdserverpb::Request* temp = v2_;
  v2_ = nullptr;
  return temp;
}
inline ::etcdserverpb::Request* InternalRaftRequest::mutable_v2() {
  
  if (v2_ == nullptr) {
    auto* p = CreateMaybeMessage<::etcdserverpb::Request>(GetArenaNoVirtual());
    v2_ = p;
  }
  // @@protoc_insertion_point(field_mutable:etcdserverpb.InternalRaftRequest.v2)
  return v2_;
}
inline void InternalRaftRequest::set_allocated_v2(::etcdserverpb::Request* v2) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(v2_);
  }
  if (v2) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      v2 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, v2, submessage_arena);
    }
    
  } else {
    
  }
  v2_ = v2;
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.InternalRaftRequest.v2)
}

// .etcdserverpb.RangeRequest range = 3;
inline bool InternalRaftRequest::has_range() const {
  return this != internal_default_instance() && range_ != nullptr;
}
inline const ::etcdserverpb::RangeRequest& InternalRaftRequest::range() const {
  const ::etcdserverpb::RangeRequest* p = range_;
  // @@protoc_insertion_point(field_get:etcdserverpb.InternalRaftRequest.range)
  return p != nullptr ? *p : *reinterpret_cast<const ::etcdserverpb::RangeRequest*>(
      &::etcdserverpb::_RangeRequest_default_instance_);
}
inline ::etcdserverpb::RangeRequest* InternalRaftRequest::release_range() {
  // @@protoc_insertion_point(field_release:etcdserverpb.InternalRaftRequest.range)
  
  ::etcdserverpb::RangeRequest* temp = range_;
  range_ = nullptr;
  return temp;
}
inline ::etcdserverpb::RangeRequest* InternalRaftRequest::mutable_range() {
  
  if (range_ == nullptr) {
    auto* p = CreateMaybeMessage<::etcdserverpb::RangeRequest>(GetArenaNoVirtual());
    range_ = p;
  }
  // @@protoc_insertion_point(field_mutable:etcdserverpb.InternalRaftRequest.range)
  return range_;
}
inline void InternalRaftRequest::set_allocated_range(::etcdserverpb::RangeRequest* range) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(range_);
  }
  if (range) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      range = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, range, submessage_arena);
    }
    
  } else {
    
  }
  range_ = range;
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.InternalRaftRequest.range)
}

// .etcdserverpb.PutRequest put = 4;
inline bool InternalRaftRequest::has_put() const {
  return this != internal_default_instance() && put_ != nullptr;
}
inline const ::etcdserverpb::PutRequest& InternalRaftRequest::put() const {
  const ::etcdserverpb::PutRequest* p = put_;
  // @@protoc_insertion_point(field_get:etcdserverpb.InternalRaftRequest.put)
  return p != nullptr ? *p : *reinterpret_cast<const ::etcdserverpb::PutRequest*>(
      &::etcdserverpb::_PutRequest_default_instance_);
}
inline ::etcdserverpb::PutRequest* InternalRaftRequest::release_put() {
  // @@protoc_insertion_point(field_release:etcdserverpb.InternalRaftRequest.put)
  
  ::etcdserverpb::PutRequest* temp = put_;
  put_ = nullptr;
  return temp;
}
inline ::etcdserverpb::PutRequest* InternalRaftRequest::mutable_put() {
  
  if (put_ == nullptr) {
    auto* p = CreateMaybeMessage<::etcdserverpb::PutRequest>(GetArenaNoVirtual());
    put_ = p;
  }
  // @@protoc_insertion_point(field_mutable:etcdserverpb.InternalRaftRequest.put)
  return put_;
}
inline void InternalRaftRequest::set_allocated_put(::etcdserverpb::PutRequest* put) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(put_);
  }
  if (put) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      put = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, put, submessage_arena);
    }
    
  } else {
    
  }
  put_ = put;
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.InternalRaftRequest.put)
}

// .etcdserverpb.DeleteRangeRequest delete_range = 5;
inline bool InternalRaftRequest::has_delete_range() const {
  return this != internal_default_instance() && delete_range_ != nullptr;
}
inline const ::etcdserverpb::DeleteRangeRequest& InternalRaftRequest::delete_range() const {
  const ::etcdserverpb::DeleteRangeRequest* p = delete_range_;
  // @@protoc_insertion_point(field_get:etcdserverpb.InternalRaftRequest.delete_range)
  return p != nullptr ? *p : *reinterpret_cast<const ::etcdserverpb::DeleteRangeRequest*>(
      &::etcdserverpb::_DeleteRangeRequest_default_instance_);
}
inline ::etcdserverpb::DeleteRangeRequest* InternalRaftRequest::release_delete_range() {
  // @@protoc_insertion_point(field_release:etcdserverpb.InternalRaftRequest.delete_range)
  
  ::etcdserverpb::DeleteRangeRequest* temp = delete_range_;
  delete_range_ = nullptr;
  return temp;
}
inline ::etcdserverpb::DeleteRangeRequest* InternalRaftRequest::mutable_delete_range() {
  
  if (delete_range_ == nullptr) {
    auto* p = CreateMaybeMessage<::etcdserverpb::DeleteRangeRequest>(GetArenaNoVirtual());
    delete_range_ = p;
  }
  // @@protoc_insertion_point(field_mutable:etcdserverpb.InternalRaftRequest.delete_range)
  return delete_range_;
}
inline void InternalRaftRequest::set_allocated_delete_range(::etcdserverpb::DeleteRangeRequest* delete_range) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(delete_range_);
  }
  if (delete_range) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      delete_range = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, delete_range, submessage_arena);
    }
    
  } else {
    
  }
  delete_range_ = delete_range;
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.InternalRaftRequest.delete_range)
}

// .etcdserverpb.TxnRequest txn = 6;
inline bool InternalRaftRequest::has_txn() const {
  return this != internal_default_instance() && txn_ != nullptr;
}
inline const ::etcdserverpb::TxnRequest& InternalRaftRequest::txn() const {
  const ::etcdserverpb::TxnRequest* p = txn_;
  // @@protoc_insertion_point(field_get:etcdserverpb.InternalRaftRequest.txn)
  return p != nullptr ? *p : *reinterpret_cast<const ::etcdserverpb::TxnRequest*>(
      &::etcdserverpb::_TxnRequest_default_instance_);
}
inline ::etcdserverpb::TxnRequest* InternalRaftRequest::release_txn() {
  // @@protoc_insertion_point(field_release:etcdserverpb.InternalRaftRequest.txn)
  
  ::etcdserverpb::TxnRequest* temp = txn_;
  txn_ = nullptr;
  return temp;
}
inline ::etcdserverpb::TxnRequest* InternalRaftRequest::mutable_txn() {
  
  if (txn_ == nullptr) {
    auto* p = CreateMaybeMessage<::etcdserverpb::TxnRequest>(GetArenaNoVirtual());
    txn_ = p;
  }
  // @@protoc_insertion_point(field_mutable:etcdserverpb.InternalRaftRequest.txn)
  return txn_;
}
inline void InternalRaftRequest::set_allocated_txn(::etcdserverpb::TxnRequest* txn) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(txn_);
  }
  if (txn) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      txn = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, txn, submessage_arena);
    }
    
  } else {
    
  }
  txn_ = txn;
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.InternalRaftRequest.txn)
}

// .etcdserverpb.CompactionRequest compaction = 7;
inline bool InternalRaftRequest::has_compaction() const {
  return this != internal_default_instance() && compaction_ != nullptr;
}
inline const ::etcdserverpb::CompactionRequest& InternalRaftRequest::compaction() const {
  const ::etcdserverpb::CompactionRequest* p = compaction_;
  // @@protoc_insertion_point(field_get:etcdserverpb.InternalRaftRequest.compaction)
  return p != nullptr ? *p : *reinterpret_cast<const ::etcdserverpb::CompactionRequest*>(
      &::etcdserverpb::_CompactionRequest_default_instance_);
}
inline ::etcdserverpb::CompactionRequest* InternalRaftRequest::release_compaction() {
  // @@protoc_insertion_point(field_release:etcdserverpb.InternalRaftRequest.compaction)
  
  ::etcdserverpb::CompactionRequest* temp = compaction_;
  compaction_ = nullptr;
  return temp;
}
inline ::etcdserverpb::CompactionRequest* InternalRaftRequest::mutable_compaction() {
  
  if (compaction_ == nullptr) {
    auto* p = CreateMaybeMessage<::etcdserverpb::CompactionRequest>(GetArenaNoVirtual());
    compaction_ = p;
  }
  // @@protoc_insertion_point(field_mutable:etcdserverpb.InternalRaftRequest.compaction)
  return compaction_;
}
inline void InternalRaftRequest::set_allocated_compaction(::etcdserverpb::CompactionRequest* compaction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(compaction_);
  }
  if (compaction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      compaction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, compaction, submessage_arena);
    }
    
  } else {
    
  }
  compaction_ = compaction;
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.InternalRaftRequest.compaction)
}

// .etcdserverpb.LeaseGrantRequest lease_grant = 8;
inline bool InternalRaftRequest::has_lease_grant() const {
  return this != internal_default_instance() && lease_grant_ != nullptr;
}
inline const ::etcdserverpb::LeaseGrantRequest& InternalRaftRequest::lease_grant() const {
  const ::etcdserverpb::LeaseGrantRequest* p = lease_grant_;
  // @@protoc_insertion_point(field_get:etcdserverpb.InternalRaftRequest.lease_grant)
  return p != nullptr ? *p : *reinterpret_cast<const ::etcdserverpb::LeaseGrantRequest*>(
      &::etcdserverpb::_LeaseGrantRequest_default_instance_);
}
inline ::etcdserverpb::LeaseGrantRequest* InternalRaftRequest::release_lease_grant() {
  // @@protoc_insertion_point(field_release:etcdserverpb.InternalRaftRequest.lease_grant)
  
  ::etcdserverpb::LeaseGrantRequest* temp = lease_grant_;
  lease_grant_ = nullptr;
  return temp;
}
inline ::etcdserverpb::LeaseGrantRequest* InternalRaftRequest::mutable_lease_grant() {
  
  if (lease_grant_ == nullptr) {
    auto* p = CreateMaybeMessage<::etcdserverpb::LeaseGrantRequest>(GetArenaNoVirtual());
    lease_grant_ = p;
  }
  // @@protoc_insertion_point(field_mutable:etcdserverpb.InternalRaftRequest.lease_grant)
  return lease_grant_;
}
inline void InternalRaftRequest::set_allocated_lease_grant(::etcdserverpb::LeaseGrantRequest* lease_grant) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(lease_grant_);
  }
  if (lease_grant) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      lease_grant = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lease_grant, submessage_arena);
    }
    
  } else {
    
  }
  lease_grant_ = lease_grant;
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.InternalRaftRequest.lease_grant)
}

// .etcdserverpb.LeaseRevokeRequest lease_revoke = 9;
inline bool InternalRaftRequest::has_lease_revoke() const {
  return this != internal_default_instance() && lease_revoke_ != nullptr;
}
inline const ::etcdserverpb::LeaseRevokeRequest& InternalRaftRequest::lease_revoke() const {
  const ::etcdserverpb::LeaseRevokeRequest* p = lease_revoke_;
  // @@protoc_insertion_point(field_get:etcdserverpb.InternalRaftRequest.lease_revoke)
  return p != nullptr ? *p : *reinterpret_cast<const ::etcdserverpb::LeaseRevokeRequest*>(
      &::etcdserverpb::_LeaseRevokeRequest_default_instance_);
}
inline ::etcdserverpb::LeaseRevokeRequest* InternalRaftRequest::release_lease_revoke() {
  // @@protoc_insertion_point(field_release:etcdserverpb.InternalRaftRequest.lease_revoke)
  
  ::etcdserverpb::LeaseRevokeRequest* temp = lease_revoke_;
  lease_revoke_ = nullptr;
  return temp;
}
inline ::etcdserverpb::LeaseRevokeRequest* InternalRaftRequest::mutable_lease_revoke() {
  
  if (lease_revoke_ == nullptr) {
    auto* p = CreateMaybeMessage<::etcdserverpb::LeaseRevokeRequest>(GetArenaNoVirtual());
    lease_revoke_ = p;
  }
  // @@protoc_insertion_point(field_mutable:etcdserverpb.InternalRaftRequest.lease_revoke)
  return lease_revoke_;
}
inline void InternalRaftRequest::set_allocated_lease_revoke(::etcdserverpb::LeaseRevokeRequest* lease_revoke) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(lease_revoke_);
  }
  if (lease_revoke) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      lease_revoke = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lease_revoke, submessage_arena);
    }
    
  } else {
    
  }
  lease_revoke_ = lease_revoke;
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.InternalRaftRequest.lease_revoke)
}

// .etcdserverpb.AlarmRequest alarm = 10;
inline bool InternalRaftRequest::has_alarm() const {
  return this != internal_default_instance() && alarm_ != nullptr;
}
inline const ::etcdserverpb::AlarmRequest& InternalRaftRequest::alarm() const {
  const ::etcdserverpb::AlarmRequest* p = alarm_;
  // @@protoc_insertion_point(field_get:etcdserverpb.InternalRaftRequest.alarm)
  return p != nullptr ? *p : *reinterpret_cast<const ::etcdserverpb::AlarmRequest*>(
      &::etcdserverpb::_AlarmRequest_default_instance_);
}
inline ::etcdserverpb::AlarmRequest* InternalRaftRequest::release_alarm() {
  // @@protoc_insertion_point(field_release:etcdserverpb.InternalRaftRequest.alarm)
  
  ::etcdserverpb::AlarmRequest* temp = alarm_;
  alarm_ = nullptr;
  return temp;
}
inline ::etcdserverpb::AlarmRequest* InternalRaftRequest::mutable_alarm() {
  
  if (alarm_ == nullptr) {
    auto* p = CreateMaybeMessage<::etcdserverpb::AlarmRequest>(GetArenaNoVirtual());
    alarm_ = p;
  }
  // @@protoc_insertion_point(field_mutable:etcdserverpb.InternalRaftRequest.alarm)
  return alarm_;
}
inline void InternalRaftRequest::set_allocated_alarm(::etcdserverpb::AlarmRequest* alarm) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(alarm_);
  }
  if (alarm) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      alarm = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, alarm, submessage_arena);
    }
    
  } else {
    
  }
  alarm_ = alarm;
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.InternalRaftRequest.alarm)
}

// .etcdserverpb.AuthEnableRequest auth_enable = 1000;
inline bool InternalRaftRequest::has_auth_enable() const {
  return this != internal_default_instance() && auth_enable_ != nullptr;
}
inline const ::etcdserverpb::AuthEnableRequest& InternalRaftRequest::auth_enable() const {
  const ::etcdserverpb::AuthEnableRequest* p = auth_enable_;
  // @@protoc_insertion_point(field_get:etcdserverpb.InternalRaftRequest.auth_enable)
  return p != nullptr ? *p : *reinterpret_cast<const ::etcdserverpb::AuthEnableRequest*>(
      &::etcdserverpb::_AuthEnableRequest_default_instance_);
}
inline ::etcdserverpb::AuthEnableRequest* InternalRaftRequest::release_auth_enable() {
  // @@protoc_insertion_point(field_release:etcdserverpb.InternalRaftRequest.auth_enable)
  
  ::etcdserverpb::AuthEnableRequest* temp = auth_enable_;
  auth_enable_ = nullptr;
  return temp;
}
inline ::etcdserverpb::AuthEnableRequest* InternalRaftRequest::mutable_auth_enable() {
  
  if (auth_enable_ == nullptr) {
    auto* p = CreateMaybeMessage<::etcdserverpb::AuthEnableRequest>(GetArenaNoVirtual());
    auth_enable_ = p;
  }
  // @@protoc_insertion_point(field_mutable:etcdserverpb.InternalRaftRequest.auth_enable)
  return auth_enable_;
}
inline void InternalRaftRequest::set_allocated_auth_enable(::etcdserverpb::AuthEnableRequest* auth_enable) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(auth_enable_);
  }
  if (auth_enable) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      auth_enable = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, auth_enable, submessage_arena);
    }
    
  } else {
    
  }
  auth_enable_ = auth_enable;
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.InternalRaftRequest.auth_enable)
}

// .etcdserverpb.AuthDisableRequest auth_disable = 1011;
inline bool InternalRaftRequest::has_auth_disable() const {
  return this != internal_default_instance() && auth_disable_ != nullptr;
}
inline const ::etcdserverpb::AuthDisableRequest& InternalRaftRequest::auth_disable() const {
  const ::etcdserverpb::AuthDisableRequest* p = auth_disable_;
  // @@protoc_insertion_point(field_get:etcdserverpb.InternalRaftRequest.auth_disable)
  return p != nullptr ? *p : *reinterpret_cast<const ::etcdserverpb::AuthDisableRequest*>(
      &::etcdserverpb::_AuthDisableRequest_default_instance_);
}
inline ::etcdserverpb::AuthDisableRequest* InternalRaftRequest::release_auth_disable() {
  // @@protoc_insertion_point(field_release:etcdserverpb.InternalRaftRequest.auth_disable)
  
  ::etcdserverpb::AuthDisableRequest* temp = auth_disable_;
  auth_disable_ = nullptr;
  return temp;
}
inline ::etcdserverpb::AuthDisableRequest* InternalRaftRequest::mutable_auth_disable() {
  
  if (auth_disable_ == nullptr) {
    auto* p = CreateMaybeMessage<::etcdserverpb::AuthDisableRequest>(GetArenaNoVirtual());
    auth_disable_ = p;
  }
  // @@protoc_insertion_point(field_mutable:etcdserverpb.InternalRaftRequest.auth_disable)
  return auth_disable_;
}
inline void InternalRaftRequest::set_allocated_auth_disable(::etcdserverpb::AuthDisableRequest* auth_disable) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(auth_disable_);
  }
  if (auth_disable) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      auth_disable = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, auth_disable, submessage_arena);
    }
    
  } else {
    
  }
  auth_disable_ = auth_disable;
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.InternalRaftRequest.auth_disable)
}

// .etcdserverpb.InternalAuthenticateRequest authenticate = 1012;
inline bool InternalRaftRequest::has_authenticate() const {
  return this != internal_default_instance() && authenticate_ != nullptr;
}
inline void InternalRaftRequest::clear_authenticate() {
  if (GetArenaNoVirtual() == nullptr && authenticate_ != nullptr) {
    delete authenticate_;
  }
  authenticate_ = nullptr;
}
inline const ::etcdserverpb::InternalAuthenticateRequest& InternalRaftRequest::authenticate() const {
  const ::etcdserverpb::InternalAuthenticateRequest* p = authenticate_;
  // @@protoc_insertion_point(field_get:etcdserverpb.InternalRaftRequest.authenticate)
  return p != nullptr ? *p : *reinterpret_cast<const ::etcdserverpb::InternalAuthenticateRequest*>(
      &::etcdserverpb::_InternalAuthenticateRequest_default_instance_);
}
inline ::etcdserverpb::InternalAuthenticateRequest* InternalRaftRequest::release_authenticate() {
  // @@protoc_insertion_point(field_release:etcdserverpb.InternalRaftRequest.authenticate)
  
  ::etcdserverpb::InternalAuthenticateRequest* temp = authenticate_;
  authenticate_ = nullptr;
  return temp;
}
inline ::etcdserverpb::InternalAuthenticateRequest* InternalRaftRequest::mutable_authenticate() {
  
  if (authenticate_ == nullptr) {
    auto* p = CreateMaybeMessage<::etcdserverpb::InternalAuthenticateRequest>(GetArenaNoVirtual());
    authenticate_ = p;
  }
  // @@protoc_insertion_point(field_mutable:etcdserverpb.InternalRaftRequest.authenticate)
  return authenticate_;
}
inline void InternalRaftRequest::set_allocated_authenticate(::etcdserverpb::InternalAuthenticateRequest* authenticate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete authenticate_;
  }
  if (authenticate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      authenticate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, authenticate, submessage_arena);
    }
    
  } else {
    
  }
  authenticate_ = authenticate;
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.InternalRaftRequest.authenticate)
}

// .etcdserverpb.AuthUserAddRequest auth_user_add = 1100;
inline bool InternalRaftRequest::has_auth_user_add() const {
  return this != internal_default_instance() && auth_user_add_ != nullptr;
}
inline const ::etcdserverpb::AuthUserAddRequest& InternalRaftRequest::auth_user_add() const {
  const ::etcdserverpb::AuthUserAddRequest* p = auth_user_add_;
  // @@protoc_insertion_point(field_get:etcdserverpb.InternalRaftRequest.auth_user_add)
  return p != nullptr ? *p : *reinterpret_cast<const ::etcdserverpb::AuthUserAddRequest*>(
      &::etcdserverpb::_AuthUserAddRequest_default_instance_);
}
inline ::etcdserverpb::AuthUserAddRequest* InternalRaftRequest::release_auth_user_add() {
  // @@protoc_insertion_point(field_release:etcdserverpb.InternalRaftRequest.auth_user_add)
  
  ::etcdserverpb::AuthUserAddRequest* temp = auth_user_add_;
  auth_user_add_ = nullptr;
  return temp;
}
inline ::etcdserverpb::AuthUserAddRequest* InternalRaftRequest::mutable_auth_user_add() {
  
  if (auth_user_add_ == nullptr) {
    auto* p = CreateMaybeMessage<::etcdserverpb::AuthUserAddRequest>(GetArenaNoVirtual());
    auth_user_add_ = p;
  }
  // @@protoc_insertion_point(field_mutable:etcdserverpb.InternalRaftRequest.auth_user_add)
  return auth_user_add_;
}
inline void InternalRaftRequest::set_allocated_auth_user_add(::etcdserverpb::AuthUserAddRequest* auth_user_add) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(auth_user_add_);
  }
  if (auth_user_add) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      auth_user_add = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, auth_user_add, submessage_arena);
    }
    
  } else {
    
  }
  auth_user_add_ = auth_user_add;
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.InternalRaftRequest.auth_user_add)
}

// .etcdserverpb.AuthUserDeleteRequest auth_user_delete = 1101;
inline bool InternalRaftRequest::has_auth_user_delete() const {
  return this != internal_default_instance() && auth_user_delete_ != nullptr;
}
inline const ::etcdserverpb::AuthUserDeleteRequest& InternalRaftRequest::auth_user_delete() const {
  const ::etcdserverpb::AuthUserDeleteRequest* p = auth_user_delete_;
  // @@protoc_insertion_point(field_get:etcdserverpb.InternalRaftRequest.auth_user_delete)
  return p != nullptr ? *p : *reinterpret_cast<const ::etcdserverpb::AuthUserDeleteRequest*>(
      &::etcdserverpb::_AuthUserDeleteRequest_default_instance_);
}
inline ::etcdserverpb::AuthUserDeleteRequest* InternalRaftRequest::release_auth_user_delete() {
  // @@protoc_insertion_point(field_release:etcdserverpb.InternalRaftRequest.auth_user_delete)
  
  ::etcdserverpb::AuthUserDeleteRequest* temp = auth_user_delete_;
  auth_user_delete_ = nullptr;
  return temp;
}
inline ::etcdserverpb::AuthUserDeleteRequest* InternalRaftRequest::mutable_auth_user_delete() {
  
  if (auth_user_delete_ == nullptr) {
    auto* p = CreateMaybeMessage<::etcdserverpb::AuthUserDeleteRequest>(GetArenaNoVirtual());
    auth_user_delete_ = p;
  }
  // @@protoc_insertion_point(field_mutable:etcdserverpb.InternalRaftRequest.auth_user_delete)
  return auth_user_delete_;
}
inline void InternalRaftRequest::set_allocated_auth_user_delete(::etcdserverpb::AuthUserDeleteRequest* auth_user_delete) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(auth_user_delete_);
  }
  if (auth_user_delete) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      auth_user_delete = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, auth_user_delete, submessage_arena);
    }
    
  } else {
    
  }
  auth_user_delete_ = auth_user_delete;
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.InternalRaftRequest.auth_user_delete)
}

// .etcdserverpb.AuthUserGetRequest auth_user_get = 1102;
inline bool InternalRaftRequest::has_auth_user_get() const {
  return this != internal_default_instance() && auth_user_get_ != nullptr;
}
inline const ::etcdserverpb::AuthUserGetRequest& InternalRaftRequest::auth_user_get() const {
  const ::etcdserverpb::AuthUserGetRequest* p = auth_user_get_;
  // @@protoc_insertion_point(field_get:etcdserverpb.InternalRaftRequest.auth_user_get)
  return p != nullptr ? *p : *reinterpret_cast<const ::etcdserverpb::AuthUserGetRequest*>(
      &::etcdserverpb::_AuthUserGetRequest_default_instance_);
}
inline ::etcdserverpb::AuthUserGetRequest* InternalRaftRequest::release_auth_user_get() {
  // @@protoc_insertion_point(field_release:etcdserverpb.InternalRaftRequest.auth_user_get)
  
  ::etcdserverpb::AuthUserGetRequest* temp = auth_user_get_;
  auth_user_get_ = nullptr;
  return temp;
}
inline ::etcdserverpb::AuthUserGetRequest* InternalRaftRequest::mutable_auth_user_get() {
  
  if (auth_user_get_ == nullptr) {
    auto* p = CreateMaybeMessage<::etcdserverpb::AuthUserGetRequest>(GetArenaNoVirtual());
    auth_user_get_ = p;
  }
  // @@protoc_insertion_point(field_mutable:etcdserverpb.InternalRaftRequest.auth_user_get)
  return auth_user_get_;
}
inline void InternalRaftRequest::set_allocated_auth_user_get(::etcdserverpb::AuthUserGetRequest* auth_user_get) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(auth_user_get_);
  }
  if (auth_user_get) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      auth_user_get = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, auth_user_get, submessage_arena);
    }
    
  } else {
    
  }
  auth_user_get_ = auth_user_get;
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.InternalRaftRequest.auth_user_get)
}

// .etcdserverpb.AuthUserChangePasswordRequest auth_user_change_password = 1103;
inline bool InternalRaftRequest::has_auth_user_change_password() const {
  return this != internal_default_instance() && auth_user_change_password_ != nullptr;
}
inline const ::etcdserverpb::AuthUserChangePasswordRequest& InternalRaftRequest::auth_user_change_password() const {
  const ::etcdserverpb::AuthUserChangePasswordRequest* p = auth_user_change_password_;
  // @@protoc_insertion_point(field_get:etcdserverpb.InternalRaftRequest.auth_user_change_password)
  return p != nullptr ? *p : *reinterpret_cast<const ::etcdserverpb::AuthUserChangePasswordRequest*>(
      &::etcdserverpb::_AuthUserChangePasswordRequest_default_instance_);
}
inline ::etcdserverpb::AuthUserChangePasswordRequest* InternalRaftRequest::release_auth_user_change_password() {
  // @@protoc_insertion_point(field_release:etcdserverpb.InternalRaftRequest.auth_user_change_password)
  
  ::etcdserverpb::AuthUserChangePasswordRequest* temp = auth_user_change_password_;
  auth_user_change_password_ = nullptr;
  return temp;
}
inline ::etcdserverpb::AuthUserChangePasswordRequest* InternalRaftRequest::mutable_auth_user_change_password() {
  
  if (auth_user_change_password_ == nullptr) {
    auto* p = CreateMaybeMessage<::etcdserverpb::AuthUserChangePasswordRequest>(GetArenaNoVirtual());
    auth_user_change_password_ = p;
  }
  // @@protoc_insertion_point(field_mutable:etcdserverpb.InternalRaftRequest.auth_user_change_password)
  return auth_user_change_password_;
}
inline void InternalRaftRequest::set_allocated_auth_user_change_password(::etcdserverpb::AuthUserChangePasswordRequest* auth_user_change_password) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(auth_user_change_password_);
  }
  if (auth_user_change_password) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      auth_user_change_password = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, auth_user_change_password, submessage_arena);
    }
    
  } else {
    
  }
  auth_user_change_password_ = auth_user_change_password;
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.InternalRaftRequest.auth_user_change_password)
}

// .etcdserverpb.AuthUserGrantRoleRequest auth_user_grant_role = 1104;
inline bool InternalRaftRequest::has_auth_user_grant_role() const {
  return this != internal_default_instance() && auth_user_grant_role_ != nullptr;
}
inline const ::etcdserverpb::AuthUserGrantRoleRequest& InternalRaftRequest::auth_user_grant_role() const {
  const ::etcdserverpb::AuthUserGrantRoleRequest* p = auth_user_grant_role_;
  // @@protoc_insertion_point(field_get:etcdserverpb.InternalRaftRequest.auth_user_grant_role)
  return p != nullptr ? *p : *reinterpret_cast<const ::etcdserverpb::AuthUserGrantRoleRequest*>(
      &::etcdserverpb::_AuthUserGrantRoleRequest_default_instance_);
}
inline ::etcdserverpb::AuthUserGrantRoleRequest* InternalRaftRequest::release_auth_user_grant_role() {
  // @@protoc_insertion_point(field_release:etcdserverpb.InternalRaftRequest.auth_user_grant_role)
  
  ::etcdserverpb::AuthUserGrantRoleRequest* temp = auth_user_grant_role_;
  auth_user_grant_role_ = nullptr;
  return temp;
}
inline ::etcdserverpb::AuthUserGrantRoleRequest* InternalRaftRequest::mutable_auth_user_grant_role() {
  
  if (auth_user_grant_role_ == nullptr) {
    auto* p = CreateMaybeMessage<::etcdserverpb::AuthUserGrantRoleRequest>(GetArenaNoVirtual());
    auth_user_grant_role_ = p;
  }
  // @@protoc_insertion_point(field_mutable:etcdserverpb.InternalRaftRequest.auth_user_grant_role)
  return auth_user_grant_role_;
}
inline void InternalRaftRequest::set_allocated_auth_user_grant_role(::etcdserverpb::AuthUserGrantRoleRequest* auth_user_grant_role) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(auth_user_grant_role_);
  }
  if (auth_user_grant_role) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      auth_user_grant_role = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, auth_user_grant_role, submessage_arena);
    }
    
  } else {
    
  }
  auth_user_grant_role_ = auth_user_grant_role;
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.InternalRaftRequest.auth_user_grant_role)
}

// .etcdserverpb.AuthUserRevokeRoleRequest auth_user_revoke_role = 1105;
inline bool InternalRaftRequest::has_auth_user_revoke_role() const {
  return this != internal_default_instance() && auth_user_revoke_role_ != nullptr;
}
inline const ::etcdserverpb::AuthUserRevokeRoleRequest& InternalRaftRequest::auth_user_revoke_role() const {
  const ::etcdserverpb::AuthUserRevokeRoleRequest* p = auth_user_revoke_role_;
  // @@protoc_insertion_point(field_get:etcdserverpb.InternalRaftRequest.auth_user_revoke_role)
  return p != nullptr ? *p : *reinterpret_cast<const ::etcdserverpb::AuthUserRevokeRoleRequest*>(
      &::etcdserverpb::_AuthUserRevokeRoleRequest_default_instance_);
}
inline ::etcdserverpb::AuthUserRevokeRoleRequest* InternalRaftRequest::release_auth_user_revoke_role() {
  // @@protoc_insertion_point(field_release:etcdserverpb.InternalRaftRequest.auth_user_revoke_role)
  
  ::etcdserverpb::AuthUserRevokeRoleRequest* temp = auth_user_revoke_role_;
  auth_user_revoke_role_ = nullptr;
  return temp;
}
inline ::etcdserverpb::AuthUserRevokeRoleRequest* InternalRaftRequest::mutable_auth_user_revoke_role() {
  
  if (auth_user_revoke_role_ == nullptr) {
    auto* p = CreateMaybeMessage<::etcdserverpb::AuthUserRevokeRoleRequest>(GetArenaNoVirtual());
    auth_user_revoke_role_ = p;
  }
  // @@protoc_insertion_point(field_mutable:etcdserverpb.InternalRaftRequest.auth_user_revoke_role)
  return auth_user_revoke_role_;
}
inline void InternalRaftRequest::set_allocated_auth_user_revoke_role(::etcdserverpb::AuthUserRevokeRoleRequest* auth_user_revoke_role) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(auth_user_revoke_role_);
  }
  if (auth_user_revoke_role) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      auth_user_revoke_role = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, auth_user_revoke_role, submessage_arena);
    }
    
  } else {
    
  }
  auth_user_revoke_role_ = auth_user_revoke_role;
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.InternalRaftRequest.auth_user_revoke_role)
}

// .etcdserverpb.AuthUserListRequest auth_user_list = 1106;
inline bool InternalRaftRequest::has_auth_user_list() const {
  return this != internal_default_instance() && auth_user_list_ != nullptr;
}
inline const ::etcdserverpb::AuthUserListRequest& InternalRaftRequest::auth_user_list() const {
  const ::etcdserverpb::AuthUserListRequest* p = auth_user_list_;
  // @@protoc_insertion_point(field_get:etcdserverpb.InternalRaftRequest.auth_user_list)
  return p != nullptr ? *p : *reinterpret_cast<const ::etcdserverpb::AuthUserListRequest*>(
      &::etcdserverpb::_AuthUserListRequest_default_instance_);
}
inline ::etcdserverpb::AuthUserListRequest* InternalRaftRequest::release_auth_user_list() {
  // @@protoc_insertion_point(field_release:etcdserverpb.InternalRaftRequest.auth_user_list)
  
  ::etcdserverpb::AuthUserListRequest* temp = auth_user_list_;
  auth_user_list_ = nullptr;
  return temp;
}
inline ::etcdserverpb::AuthUserListRequest* InternalRaftRequest::mutable_auth_user_list() {
  
  if (auth_user_list_ == nullptr) {
    auto* p = CreateMaybeMessage<::etcdserverpb::AuthUserListRequest>(GetArenaNoVirtual());
    auth_user_list_ = p;
  }
  // @@protoc_insertion_point(field_mutable:etcdserverpb.InternalRaftRequest.auth_user_list)
  return auth_user_list_;
}
inline void InternalRaftRequest::set_allocated_auth_user_list(::etcdserverpb::AuthUserListRequest* auth_user_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(auth_user_list_);
  }
  if (auth_user_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      auth_user_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, auth_user_list, submessage_arena);
    }
    
  } else {
    
  }
  auth_user_list_ = auth_user_list;
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.InternalRaftRequest.auth_user_list)
}

// .etcdserverpb.AuthRoleListRequest auth_role_list = 1107;
inline bool InternalRaftRequest::has_auth_role_list() const {
  return this != internal_default_instance() && auth_role_list_ != nullptr;
}
inline const ::etcdserverpb::AuthRoleListRequest& InternalRaftRequest::auth_role_list() const {
  const ::etcdserverpb::AuthRoleListRequest* p = auth_role_list_;
  // @@protoc_insertion_point(field_get:etcdserverpb.InternalRaftRequest.auth_role_list)
  return p != nullptr ? *p : *reinterpret_cast<const ::etcdserverpb::AuthRoleListRequest*>(
      &::etcdserverpb::_AuthRoleListRequest_default_instance_);
}
inline ::etcdserverpb::AuthRoleListRequest* InternalRaftRequest::release_auth_role_list() {
  // @@protoc_insertion_point(field_release:etcdserverpb.InternalRaftRequest.auth_role_list)
  
  ::etcdserverpb::AuthRoleListRequest* temp = auth_role_list_;
  auth_role_list_ = nullptr;
  return temp;
}
inline ::etcdserverpb::AuthRoleListRequest* InternalRaftRequest::mutable_auth_role_list() {
  
  if (auth_role_list_ == nullptr) {
    auto* p = CreateMaybeMessage<::etcdserverpb::AuthRoleListRequest>(GetArenaNoVirtual());
    auth_role_list_ = p;
  }
  // @@protoc_insertion_point(field_mutable:etcdserverpb.InternalRaftRequest.auth_role_list)
  return auth_role_list_;
}
inline void InternalRaftRequest::set_allocated_auth_role_list(::etcdserverpb::AuthRoleListRequest* auth_role_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(auth_role_list_);
  }
  if (auth_role_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      auth_role_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, auth_role_list, submessage_arena);
    }
    
  } else {
    
  }
  auth_role_list_ = auth_role_list;
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.InternalRaftRequest.auth_role_list)
}

// .etcdserverpb.AuthRoleAddRequest auth_role_add = 1200;
inline bool InternalRaftRequest::has_auth_role_add() const {
  return this != internal_default_instance() && auth_role_add_ != nullptr;
}
inline const ::etcdserverpb::AuthRoleAddRequest& InternalRaftRequest::auth_role_add() const {
  const ::etcdserverpb::AuthRoleAddRequest* p = auth_role_add_;
  // @@protoc_insertion_point(field_get:etcdserverpb.InternalRaftRequest.auth_role_add)
  return p != nullptr ? *p : *reinterpret_cast<const ::etcdserverpb::AuthRoleAddRequest*>(
      &::etcdserverpb::_AuthRoleAddRequest_default_instance_);
}
inline ::etcdserverpb::AuthRoleAddRequest* InternalRaftRequest::release_auth_role_add() {
  // @@protoc_insertion_point(field_release:etcdserverpb.InternalRaftRequest.auth_role_add)
  
  ::etcdserverpb::AuthRoleAddRequest* temp = auth_role_add_;
  auth_role_add_ = nullptr;
  return temp;
}
inline ::etcdserverpb::AuthRoleAddRequest* InternalRaftRequest::mutable_auth_role_add() {
  
  if (auth_role_add_ == nullptr) {
    auto* p = CreateMaybeMessage<::etcdserverpb::AuthRoleAddRequest>(GetArenaNoVirtual());
    auth_role_add_ = p;
  }
  // @@protoc_insertion_point(field_mutable:etcdserverpb.InternalRaftRequest.auth_role_add)
  return auth_role_add_;
}
inline void InternalRaftRequest::set_allocated_auth_role_add(::etcdserverpb::AuthRoleAddRequest* auth_role_add) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(auth_role_add_);
  }
  if (auth_role_add) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      auth_role_add = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, auth_role_add, submessage_arena);
    }
    
  } else {
    
  }
  auth_role_add_ = auth_role_add;
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.InternalRaftRequest.auth_role_add)
}

// .etcdserverpb.AuthRoleDeleteRequest auth_role_delete = 1201;
inline bool InternalRaftRequest::has_auth_role_delete() const {
  return this != internal_default_instance() && auth_role_delete_ != nullptr;
}
inline const ::etcdserverpb::AuthRoleDeleteRequest& InternalRaftRequest::auth_role_delete() const {
  const ::etcdserverpb::AuthRoleDeleteRequest* p = auth_role_delete_;
  // @@protoc_insertion_point(field_get:etcdserverpb.InternalRaftRequest.auth_role_delete)
  return p != nullptr ? *p : *reinterpret_cast<const ::etcdserverpb::AuthRoleDeleteRequest*>(
      &::etcdserverpb::_AuthRoleDeleteRequest_default_instance_);
}
inline ::etcdserverpb::AuthRoleDeleteRequest* InternalRaftRequest::release_auth_role_delete() {
  // @@protoc_insertion_point(field_release:etcdserverpb.InternalRaftRequest.auth_role_delete)
  
  ::etcdserverpb::AuthRoleDeleteRequest* temp = auth_role_delete_;
  auth_role_delete_ = nullptr;
  return temp;
}
inline ::etcdserverpb::AuthRoleDeleteRequest* InternalRaftRequest::mutable_auth_role_delete() {
  
  if (auth_role_delete_ == nullptr) {
    auto* p = CreateMaybeMessage<::etcdserverpb::AuthRoleDeleteRequest>(GetArenaNoVirtual());
    auth_role_delete_ = p;
  }
  // @@protoc_insertion_point(field_mutable:etcdserverpb.InternalRaftRequest.auth_role_delete)
  return auth_role_delete_;
}
inline void InternalRaftRequest::set_allocated_auth_role_delete(::etcdserverpb::AuthRoleDeleteRequest* auth_role_delete) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(auth_role_delete_);
  }
  if (auth_role_delete) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      auth_role_delete = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, auth_role_delete, submessage_arena);
    }
    
  } else {
    
  }
  auth_role_delete_ = auth_role_delete;
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.InternalRaftRequest.auth_role_delete)
}

// .etcdserverpb.AuthRoleGetRequest auth_role_get = 1202;
inline bool InternalRaftRequest::has_auth_role_get() const {
  return this != internal_default_instance() && auth_role_get_ != nullptr;
}
inline const ::etcdserverpb::AuthRoleGetRequest& InternalRaftRequest::auth_role_get() const {
  const ::etcdserverpb::AuthRoleGetRequest* p = auth_role_get_;
  // @@protoc_insertion_point(field_get:etcdserverpb.InternalRaftRequest.auth_role_get)
  return p != nullptr ? *p : *reinterpret_cast<const ::etcdserverpb::AuthRoleGetRequest*>(
      &::etcdserverpb::_AuthRoleGetRequest_default_instance_);
}
inline ::etcdserverpb::AuthRoleGetRequest* InternalRaftRequest::release_auth_role_get() {
  // @@protoc_insertion_point(field_release:etcdserverpb.InternalRaftRequest.auth_role_get)
  
  ::etcdserverpb::AuthRoleGetRequest* temp = auth_role_get_;
  auth_role_get_ = nullptr;
  return temp;
}
inline ::etcdserverpb::AuthRoleGetRequest* InternalRaftRequest::mutable_auth_role_get() {
  
  if (auth_role_get_ == nullptr) {
    auto* p = CreateMaybeMessage<::etcdserverpb::AuthRoleGetRequest>(GetArenaNoVirtual());
    auth_role_get_ = p;
  }
  // @@protoc_insertion_point(field_mutable:etcdserverpb.InternalRaftRequest.auth_role_get)
  return auth_role_get_;
}
inline void InternalRaftRequest::set_allocated_auth_role_get(::etcdserverpb::AuthRoleGetRequest* auth_role_get) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(auth_role_get_);
  }
  if (auth_role_get) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      auth_role_get = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, auth_role_get, submessage_arena);
    }
    
  } else {
    
  }
  auth_role_get_ = auth_role_get;
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.InternalRaftRequest.auth_role_get)
}

// .etcdserverpb.AuthRoleGrantPermissionRequest auth_role_grant_permission = 1203;
inline bool InternalRaftRequest::has_auth_role_grant_permission() const {
  return this != internal_default_instance() && auth_role_grant_permission_ != nullptr;
}
inline const ::etcdserverpb::AuthRoleGrantPermissionRequest& InternalRaftRequest::auth_role_grant_permission() const {
  const ::etcdserverpb::AuthRoleGrantPermissionRequest* p = auth_role_grant_permission_;
  // @@protoc_insertion_point(field_get:etcdserverpb.InternalRaftRequest.auth_role_grant_permission)
  return p != nullptr ? *p : *reinterpret_cast<const ::etcdserverpb::AuthRoleGrantPermissionRequest*>(
      &::etcdserverpb::_AuthRoleGrantPermissionRequest_default_instance_);
}
inline ::etcdserverpb::AuthRoleGrantPermissionRequest* InternalRaftRequest::release_auth_role_grant_permission() {
  // @@protoc_insertion_point(field_release:etcdserverpb.InternalRaftRequest.auth_role_grant_permission)
  
  ::etcdserverpb::AuthRoleGrantPermissionRequest* temp = auth_role_grant_permission_;
  auth_role_grant_permission_ = nullptr;
  return temp;
}
inline ::etcdserverpb::AuthRoleGrantPermissionRequest* InternalRaftRequest::mutable_auth_role_grant_permission() {
  
  if (auth_role_grant_permission_ == nullptr) {
    auto* p = CreateMaybeMessage<::etcdserverpb::AuthRoleGrantPermissionRequest>(GetArenaNoVirtual());
    auth_role_grant_permission_ = p;
  }
  // @@protoc_insertion_point(field_mutable:etcdserverpb.InternalRaftRequest.auth_role_grant_permission)
  return auth_role_grant_permission_;
}
inline void InternalRaftRequest::set_allocated_auth_role_grant_permission(::etcdserverpb::AuthRoleGrantPermissionRequest* auth_role_grant_permission) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(auth_role_grant_permission_);
  }
  if (auth_role_grant_permission) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      auth_role_grant_permission = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, auth_role_grant_permission, submessage_arena);
    }
    
  } else {
    
  }
  auth_role_grant_permission_ = auth_role_grant_permission;
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.InternalRaftRequest.auth_role_grant_permission)
}

// .etcdserverpb.AuthRoleRevokePermissionRequest auth_role_revoke_permission = 1204;
inline bool InternalRaftRequest::has_auth_role_revoke_permission() const {
  return this != internal_default_instance() && auth_role_revoke_permission_ != nullptr;
}
inline const ::etcdserverpb::AuthRoleRevokePermissionRequest& InternalRaftRequest::auth_role_revoke_permission() const {
  const ::etcdserverpb::AuthRoleRevokePermissionRequest* p = auth_role_revoke_permission_;
  // @@protoc_insertion_point(field_get:etcdserverpb.InternalRaftRequest.auth_role_revoke_permission)
  return p != nullptr ? *p : *reinterpret_cast<const ::etcdserverpb::AuthRoleRevokePermissionRequest*>(
      &::etcdserverpb::_AuthRoleRevokePermissionRequest_default_instance_);
}
inline ::etcdserverpb::AuthRoleRevokePermissionRequest* InternalRaftRequest::release_auth_role_revoke_permission() {
  // @@protoc_insertion_point(field_release:etcdserverpb.InternalRaftRequest.auth_role_revoke_permission)
  
  ::etcdserverpb::AuthRoleRevokePermissionRequest* temp = auth_role_revoke_permission_;
  auth_role_revoke_permission_ = nullptr;
  return temp;
}
inline ::etcdserverpb::AuthRoleRevokePermissionRequest* InternalRaftRequest::mutable_auth_role_revoke_permission() {
  
  if (auth_role_revoke_permission_ == nullptr) {
    auto* p = CreateMaybeMessage<::etcdserverpb::AuthRoleRevokePermissionRequest>(GetArenaNoVirtual());
    auth_role_revoke_permission_ = p;
  }
  // @@protoc_insertion_point(field_mutable:etcdserverpb.InternalRaftRequest.auth_role_revoke_permission)
  return auth_role_revoke_permission_;
}
inline void InternalRaftRequest::set_allocated_auth_role_revoke_permission(::etcdserverpb::AuthRoleRevokePermissionRequest* auth_role_revoke_permission) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(auth_role_revoke_permission_);
  }
  if (auth_role_revoke_permission) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      auth_role_revoke_permission = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, auth_role_revoke_permission, submessage_arena);
    }
    
  } else {
    
  }
  auth_role_revoke_permission_ = auth_role_revoke_permission;
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.InternalRaftRequest.auth_role_revoke_permission)
}

// -------------------------------------------------------------------

// EmptyResponse

// -------------------------------------------------------------------

// InternalAuthenticateRequest

// string name = 1;
inline void InternalAuthenticateRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& InternalAuthenticateRequest::name() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.InternalAuthenticateRequest.name)
  return name_.GetNoArena();
}
inline void InternalAuthenticateRequest::set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:etcdserverpb.InternalAuthenticateRequest.name)
}
inline void InternalAuthenticateRequest::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:etcdserverpb.InternalAuthenticateRequest.name)
}
inline void InternalAuthenticateRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:etcdserverpb.InternalAuthenticateRequest.name)
}
inline void InternalAuthenticateRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:etcdserverpb.InternalAuthenticateRequest.name)
}
inline std::string* InternalAuthenticateRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:etcdserverpb.InternalAuthenticateRequest.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* InternalAuthenticateRequest::release_name() {
  // @@protoc_insertion_point(field_release:etcdserverpb.InternalAuthenticateRequest.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void InternalAuthenticateRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.InternalAuthenticateRequest.name)
}

// string password = 2;
inline void InternalAuthenticateRequest::clear_password() {
  password_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& InternalAuthenticateRequest::password() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.InternalAuthenticateRequest.password)
  return password_.GetNoArena();
}
inline void InternalAuthenticateRequest::set_password(const std::string& value) {
  
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:etcdserverpb.InternalAuthenticateRequest.password)
}
inline void InternalAuthenticateRequest::set_password(std::string&& value) {
  
  password_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:etcdserverpb.InternalAuthenticateRequest.password)
}
inline void InternalAuthenticateRequest::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:etcdserverpb.InternalAuthenticateRequest.password)
}
inline void InternalAuthenticateRequest::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:etcdserverpb.InternalAuthenticateRequest.password)
}
inline std::string* InternalAuthenticateRequest::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:etcdserverpb.InternalAuthenticateRequest.password)
  return password_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* InternalAuthenticateRequest::release_password() {
  // @@protoc_insertion_point(field_release:etcdserverpb.InternalAuthenticateRequest.password)
  
  return password_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void InternalAuthenticateRequest::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.InternalAuthenticateRequest.password)
}

// string simple_token = 3;
inline void InternalAuthenticateRequest::clear_simple_token() {
  simple_token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& InternalAuthenticateRequest::simple_token() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.InternalAuthenticateRequest.simple_token)
  return simple_token_.GetNoArena();
}
inline void InternalAuthenticateRequest::set_simple_token(const std::string& value) {
  
  simple_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:etcdserverpb.InternalAuthenticateRequest.simple_token)
}
inline void InternalAuthenticateRequest::set_simple_token(std::string&& value) {
  
  simple_token_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:etcdserverpb.InternalAuthenticateRequest.simple_token)
}
inline void InternalAuthenticateRequest::set_simple_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  simple_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:etcdserverpb.InternalAuthenticateRequest.simple_token)
}
inline void InternalAuthenticateRequest::set_simple_token(const char* value, size_t size) {
  
  simple_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:etcdserverpb.InternalAuthenticateRequest.simple_token)
}
inline std::string* InternalAuthenticateRequest::mutable_simple_token() {
  
  // @@protoc_insertion_point(field_mutable:etcdserverpb.InternalAuthenticateRequest.simple_token)
  return simple_token_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* InternalAuthenticateRequest::release_simple_token() {
  // @@protoc_insertion_point(field_release:etcdserverpb.InternalAuthenticateRequest.simple_token)
  
  return simple_token_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void InternalAuthenticateRequest::set_allocated_simple_token(std::string* simple_token) {
  if (simple_token != nullptr) {
    
  } else {
    
  }
  simple_token_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), simple_token);
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.InternalAuthenticateRequest.simple_token)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace etcdserverpb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_raft_5finternal_2eproto
